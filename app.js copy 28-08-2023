/*
 * Starter Project for WhatsApp Echo Bot Tutorial
 *
 * Remix this as the starting point for following the WhatsApp Echo Bot tutorial
 *
 */
const sessionTimeout = 1 * 60 * 1000;
function sendMessage(phone_number_id, data) {
  let url =
    "https://graph.facebook.com/v16.0/" +
    phone_number_id +
    "/messages?access_token=" +
    token;
  axios({
    method: "POST", // Required, HTTP method, a string, e.g. POST, GET
    url: url,
    data: data,
    headers: { "Content-Type": "application/json" },
  })
    .then(function (response) {
      console.log(JSON.stringify(response.data));
    })
    .catch(function (error) {
      console.log(error);
    });
}
const sheet1 =
  "https://script.google.com/macros/s/AKfycbwvMuUIwKJCzmbGV61S9zG5DijC8dfqfkH8sf6yGC7UNZyljiVL8JodmsAJAB7U86qq/exec?whatsapp=";
const sheetFDR =
  "https://script.google.com/macros/s/AKfycbz62hnwLdv-t9oMqZ3L9F5t4b765T_4tjNX_M7rXoxCyM3083jEB8xiWsN8i9PNt9NQ/exec";
const codeFdr =
  "https://script.google.com/macros/s/AKfycbyQtsLYfQGg6rzqkrI8LEzd_fuKCSM0GXNrprqTZMSI02Wi_-ZcYEWnb4wr1gwxkxvf/exec?kode=";
const route = [];
const cart = { data: [] };
const catalogid = [];
// Access token for your app
// (copy token from DevX getting started page
// and save it as environment variable into the .env file)
const token = process.env.WHATSAPP_TOKEN;
const sessions = {}; // Object to store session data

//const SESSION_TIMEOUT = 30 * 60 * 1000; // Set session timeout to 30 minutes in milliseconds
// Imports dependencies and set up http server
const express = require("express"),
  body_parser = require("body-parser"),
  axios = require("axios").default,
  app = express().use(body_parser.json()); // creates express http server

// Sets server port and logs message on success
app.listen(process.env.PORT || 1337, () => console.log("webhook is listening"));

// Middleware to check session timeout
const session = {};

function sessionMiddleware(sessionTimeout) {
  return function (req, res, next) {
    if (req.body.object) {
      if (
        req.body.entry &&
        req.body.entry[0].changes &&
        req.body.entry[0].changes[0] &&
        req.body.entry[0].changes[0].value.messages &&
        req.body.entry[0].changes[0].value.messages[0]
      ) {
        const phoneNumber = req.body.entry[0].changes[0].value.messages[0].from;
        console.log("ini cek nomornya masuk apa engga " + phoneNumber);
        const phoneNumberID =
          req.body.entry[0].changes[0].value.metadata.phone_number_id;
        const sessionId =
          req.body.sessionId || getSessionIdFromPhoneNumber(phoneNumber);
        if (sessionId && sessions[sessionId]) {
          const session = sessions[sessionId];

          const currentTime = new Date().getTime();
          if (currentTime - session.lastAccessTime > sessionTimeout) {
            // Session has timed out, remove the session
            delete sessions[sessionId];
            req.session = null;
          } else {
            // Session exists and is valid, update the session data and reset the timer
            session.lastAccessTime = currentTime;
            session.phoneNumber = phoneNumber;
            req.session = session.data;
          }
        } else {
          // Session does not exist or is invalid, create a new session
          const newSessionId = generateSessionId();
          const currentTime = new Date().getTime();
          const newSession = {
            sessionId: newSessionId,
            creationTime: currentTime,
            lastAccessTime: currentTime,
            phoneNumber: phoneNumber,
            phoneNumberID: phoneNumberID,
            data: {},
          };
          sessions[newSessionId] = newSession;
          req.session = newSession.data;
        }
        next();
      }
    }
  };
}

function getSessionIdFromPhoneNumber(phoneNumber) {
  // Get the session ID for the given phone number, if it exists
  const sessionIds = Object.keys(sessions);
  for (let i = 0; i < sessionIds.length; i++) {
    const sessionId = sessionIds[i];
    const session = sessions[sessionId];
    if (session.phoneNumber === phoneNumber) {
      return sessionId;
    }
  }
  return null;
}

function getFromPhoneNumber(phoneNumber) {
  // Get the session ID for the given phone number, if it exists
  const sessionIds = Object.keys(sessions);
  for (let i = 0; i < sessionIds.length; i++) {
    const sessionId = sessionIds[i];
    const session = sessions[sessionId];
    if (session.phoneNumber === phoneNumber) {
      return session.phoneNumber;
    }
  }
  return null;
}
function generateSessionId() {
  // Generate a random session ID using the uuid package
  const uuid = require("uuid");
  return uuid.v4();
}

// use th

// Accepts POST requests at /webhook endpoint
app.post("/webhook", sessionMiddleware(sessionTimeout), (req, res) => {
  // Parse the request body from the POST
  let body = req.body;
  // console.log(sessions);
  // console.log(req+" ini test");
  // console.log(req.body.phoneNumber);
  // Update last active time for the session

  // Check the Incoming webhook message
  console.log(JSON.stringify(req.body, null, 2));
  // console.log(body);

  // info on WhatsApp text message payload: https://developers.facebook.com/docs/whatsapp/cloud-api/webhooks/payload-examples#text-messages
  if (req.body.object) {
    if (
      req.body.entry &&
      req.body.entry[0].changes &&
      req.body.entry[0].changes[0] &&
      req.body.entry[0].changes[0].value.messages &&
      req.body.entry[0].changes[0].value.messages[0]
    ) {
      let phone_number_id =
        req.body.entry[0].changes[0].value.metadata.phone_number_id;
      let from = req.body.entry[0].changes[0].value.messages[0].from; // extract the phone number from the webhook payload
      // let msg_body = req.body.entry[0].changes[0].value.messages[0].text.body; // extract the message text from the webhook payload
      // let name = req.body.entry[0].changes[0].contacts[0].profile.name;
      let type_message = req.body.entry[0].changes[0].value.messages[0].type;
      // console.log(name);
      let test;
      let items;
      if (type_message == "text") {
        let msg_body = req.body.entry[0].changes[0].value.messages[0].text.body;
        test = msg_body;
      } else if (type_message == "interactive") {
        let msg_body =
          req.body.entry[0].changes[0].value.messages[0].interactive
            .button_reply.id;
        test = msg_body;
        items = msg_body;
      }
      console.log(test);
      console.log("di session check " + getFromPhoneNumber(from));
      if (
        // route.includes(msg.key.remoteJid.replace("@s.whatsapp.net", ""))
        route.some((route) => route.wa === from)
      ) {
        if (test == "mulaiCheck") {
          console.log("masuk button");
          axios.get(sheet1 + from).then(async (response) => {
            // console.log(response.data);
            const { success, data } = response.data;
            if (success) {
              // items part

              var name = data.nama;
              var str =
                "Hallo " +
                name +
                "! \n\nSilahkan pilih Menu yang tersedia dibawah ini:";
              var button = JSON.stringify({
                messaging_product: "whatsapp",
                recipient_type: "individual",
                to: from,
                type: "interactive",
                interactive: {
                  type: "button",
                  body: {
                    text: str,
                  },
                  footer: {
                    text: "StarPart Motor ~ The Bigest Supplier in West Java",
                  },
                  action: {
                    buttons: [
                      {
                        type: "reply",
                        reply: {
                          id: "Order",
                          title: "Order",
                        },
                      },
                      {
                        type: "reply",
                        reply: {
                          id: "CheckAR",
                          title: "CheckAR",
                        },
                      },
                    ],
                  },
                },
              });
              sendMessage(phone_number_id, button);
              // }
              // break;
            } else {
              let data = JSON.stringify({
                messaging_product: "whatsapp",
                to: from,
                text: {
                  body: "Mohon maaf nomor anda belum terdaftar di aplikasi ini, \nsilahkan menghubungi sales kami.",
                },
              });
              sendMessage(phone_number_id, data);
            }
          });
        }
      } else {
        let data = JSON.stringify({
          messaging_product: "whatsapp",
          to: from,
          type: "interactive",
          interactive: {
            type: "button",
            body: {
              text: "Selamat Datang di StarPart. \n\nIni Robot Order. \n\nSilahkan pilih button dibawah ini untuk melakukan pemesanan.",
            },
            footer: {
              text: "StarPart Motor ~ The Bigest Supplier in West Java",
            },
            action: {
              buttons: [
                {
                  type: "reply",
                  reply: {
                    id: "mulaiCheck",
                    title: "Mulai",
                  },
                },
              ],
            },
          },
        });
        sendMessage(phone_number_id, data);
        route.push({
          wa: from,
        });
      }
      // console.log(msg_body);
    }
    res.sendStatus(200);
  } else {
    // Return a '404 Not Found' if event is not from a WhatsApp API
    res.sendStatus(404);
  }
});

// Accepts GET requests at the /webhook endpoint. You need this URL to setup webhook initially.
// info on verification request payload: https://developers.facebook.com/docs/graph-api/webhooks/getting-started#verification-requests
app.get("/webhook", (req, res) => {
  /**
   * UPDATE YOUR VERIFY TOKEN
   *This will be the Verify Token value when you set up webhook
   **/
  const verify_token = process.env.VERIFY_TOKEN;

  // Parse params from the webhook verification request
  let mode = req.query["hub.mode"];
  let token = req.query["hub.verify_token"];
  let challenge = req.query["hub.challenge"];

  // Check if a token and mode were sent
  if (mode && token) {
    // Check the mode and token sent are correct
    if (mode === "subscribe" && token === verify_token) {
      // Respond with 200 OK and challenge token from the request
      console.log("WEBHOOK_VERIFIED");
      res.status(200).send(challenge);
    } else {
      // Responds with '403 Forbidden' if verify tokens do not match
      res.sendStatus(403);
    }
  }
});

setInterval(() => {
  const currentTime = new Date().getTime();
  Object.keys(sessions).forEach((sessionId) => {
    const session = sessions[sessionId];
    // const firstNotif =  5 * 60 * 1000;

    if (currentTime - session.lastAccessTime > sessionTimeout) {
      console.log(currentTime - session.lastAccessTime);
      let data = JSON.stringify({
        messaging_product: "whatsapp",
        to: session.phoneNumber,
        text: {
          body: "Terimakasih telah menghubungi kami",
        },
      });

      sendMessage(session.phoneNumberID, data);
      delete sessions[sessionId];
      console.log("Sebelum " + route);
      let index = route.findIndex((route) => route.wa === session.phoneNumber);
      const x = route.splice(index, 1);
      console.log(index);
      console.log(x);
      console.log("Sesudah " + route);

      console.log(sessions);
    } 
//     else if (currentTime - session.lastAccessTime > firstNotif) {
      
      
//       console.log("current time " + currentTime);
//       console.log("last " + session.lastAccessTime);
//       console.log("pengurangan "+currentTime - session.lastAccessTime);
//       console.log("waktunya "+console.log(firstNotif));
//       // console.log()
//       let data = JSON.stringify({
//         messaging_product: "whatsapp",
//         to: session.phoneNumber,
//         text: {
//           body: "waktu anda tersisa 30 detik",
//         },
//       });
//       sendMessage(session.phoneNumberID, data);
//     }
  });
}, sessionTimeout);
// In this example, the session data is stored in an in-memory object called sessions, and the session middleware function takes a sessionTimeout parameter that specifies the maximum amount of time that a session can be inactive before it
